package com.algorithm.sword4offer;

/**
 * 题目描述
 * 在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。
 * 输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。
 * 即输出P%1000000007
 * <p>
 * 输入描述:
 * 题目保证输入的数组中没有的相同的数字
 * <p>
 * 数据范围：
 * <p>
 * 对于%50的数据,size<=10^4
 * 对于%75的数据,size<=10^5
 * 对于%100的数据,size<=2*10^5
 * <p>
 * 示例1
 * 输入
 * [1.java,2,3,4,5,6,7,0]
 * 返回值
 * 7
 */
public class Jz35_InversePairs {
    /**
     * 双循环暴力破解法， 时间复杂度为O(n^2),会超时
     *
     * @param array
     * @return
     */
    public int inversePairs1(int[] array) {
        int count = 0;
        for (int i = 0; i < array.length; i++) {
            for (int j = i + 1; j < array.length; j++) {
                if (array[i] > array[j]) {
                    count++;
                }
            }
        }
        return count;
    }

    /**
     * 利用归并排序改进方法
     *
     * @param array
     */
    public int inversePairs(int[] array) {
        if (array == null || array.length == 0) return 0;
        int len = array.length;
        int[] temp = new int[len];
        int res = mergeSort(array, temp, 0, len - 1);
        return res % 1000000007;
    }

    public int mergeSort(int arr[], int[] temp, int start, int end) {
        if (start >= end) {
            return 0;
        }
        int mid = (start + end) / 2;
        int leftCount = mergeSort(arr, temp, start, mid) % 1000000007;
        int rightCount = mergeSort(arr, temp, mid + 1, end) % 1000000007;

        int start1 = start;
        int end1 = mid;
        int start2 = mid + 1;
        int end2 = end;
        int index = start;
        int count = 0;
        while (start1 <= end1 && start2 <= end2) {
            if (arr[start1] > arr[start2]) {
                temp[index++] = arr[start2++];
                count += (end1 - start1 + 1) ;
                count %= 1000000007;
            } else {
                temp[index++] = arr[start1++];
            }
        }
        while (start1 <= end1) {
            temp[index++] = arr[start1++];
        }
        while (start2 <= end2) {
            temp[index++] = arr[start2++];
        }
        //将排好序的复制到原来的那一段上面
        for (int i = start; i <= end; i++) {
            arr[i] = temp[i];
        }
        return leftCount + rightCount + count;
    }


    public static void main(String[] args) {
        Jz35_InversePairs jz35_inversePairs = new Jz35_InversePairs();
        int[] testdata = {627126,415347,850134,371085,279048,705820,453064,944751,92317,58592,167988,284065,992573,78043,190215,104546,607528,391775,701214,849731,231053,603058,975374,199773,479544,143961,206797,325662,90035,69615,429916,717161,484962,796403,604598,280362,502223,57662,741466,594540,632606,909454,394957,625180,503849,585172,729726,627729,976947,947293,477461,724352,66703,452835,440478,62599,596797,163627,388261,203184,233243,334529,436697,234557,647284,41295,514920,665859,615310,256386,776752,247916,682192,171709,389448,186041,273234,635527,813771,766533,582820,807584,490886,649523,260419,447716,228474,373568,611343,616735,576752,844586,467616,529801,595496,631253,571097,110416,297112,186407,883154,73864,950675,81698,245574,340124,267739,35160,975651,597862,801693,74823,921798,292579,240698,182218,256647,469172,72138,867991,602259,165243,228929,69875,695044,824425,701128,782493,451193,998241,485252,334347,588457,435928,416045,350383,292404,200137,385543,268055,314351,187237,859230,236150,996168,99928,934720,252816,569100,523210,120807,171359,688453,866088,757586,383498,206866,458715,682343,658059,973308,167596,508759,78117,603524,441156,428501,412280,157645,814044,196687,471997,1281,55917,224499,997450,155845,159219,250266,241297,682429,887425,412656,887235,269865,686594,787085,476731,661661,469428,134791,634969,637024,643550,229439,756900,601058,657940,169180,758704,471984,365867,230701,473266,421784,455200,470716,93981,130771,237334,335278,329552,641111,264286,733139,910976,950881,520224,904060,612542,989653,38851,763864,143029,198753,993303,899930,799811,651243,585462,558515,639579,951330,305568,112845,889466,277120,99913,499800,924243,853599,835078,770148,11062,615717,503287,922039,82950,23512,826099,695492,529517,381302,975708,672546,96407,485363,88828,896218,652958,674291,971086,292538,141973,276654,921735,547791,70127,21649,47591,994370,391600,399022,764518,402663,14739,267806,841054,97689,807670,183505,309533,337187,564807,801594,9733,661214,803309,614914,73784,456268,805557,44870,265158,947530,837877,703245,11673,908004,241246,59265,418726,632847,974639,183245,35510,505730,967403,392916,603419,775073,576421,429304,112260,141228,747250,638345,318794,550560,769611,392578,523180,575168,953801,304690,39050,308030,7935,50724,216034,249182,626341,151112,882029,600980,334357,433891,106710,818112,826807,226481,593185,919580,172137};
        System.out.println(jz35_inversePairs.inversePairs(testdata));
    }


}
